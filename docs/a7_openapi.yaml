openapi: 3.0.0
info:
  version: '1.0'
  title: 'BidZenith Web API'
  description: 'Web Resources Specification for BidZenith'

servers:
  - url: http://127.0.0.1:8000
    description: Development server

tags:
  - name: 'M01: Authentication and Individual Profile'
  - name: 'M02: Auctions'
  - name: 'M03: Bidding on Auctions'
  - name: 'M04: User Administration and Static Pages'

paths:
  /login:
    get:
      operationId: R101
      summary: 'R101: Login Form'
      description: 'Provide login form for user authentication. Access: PUB'
      tags:
        - 'M01: Authentication and Individual Profile'
      responses:
        '200':
          description: 'OK. Display login form.'

    post:
      operationId: R102
      summary: 'R102: Login Action'
      description: 'Process user login form submission. Access: PUB'
      tags:
        - 'M01: Authentication and Individual Profile'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '302':
          description: 'Redirect after successful/failed login.'
          headers:
            Location:
              schema:
                type: string
              examples:
                success:
                  value: '/profile'
                failure:
                  value: '/login'

  /register:
    get:
      operationId: R103
      summary: 'R103: Register Form'
      description: 'Provide registration form for new users. Access: PUB'
      tags:
        - 'M01: Authentication and Individual Profile'
      responses:
        '200':
          description: 'OK. Display registration form.'

    post:
      operationId: R104
      summary: 'R104: Register Action'
      description: 'Process new user registration form submission. Access: PUB'
      tags:
        - 'M01: Authentication and Individual Profile'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '302':
          description: 'Redirect after successful/failed registration.'
          headers:
            Location:
              schema:
                type: string
              examples:
                success:
                  value: '/profile'
                failure:
                  value: '/register'

  /logout:
    post:
      operationId: R107
      summary: 'R107: Logout Action'
      description: 'Log out the authenticated user. Access: USR'
      tags:
        - 'M01: Authentication and Individual Profile'
      responses:
        '302':
          description: 'Redirect to home page after logout.'
          headers:
            Location:
              schema:
                type: string
              example: '/home'

  /profile:
    get:
      operationId: R105
      summary: 'R105: View User Profile'
      description: 'Display the authenticated user\'s profile details. Access: USR'
      tags:
        - 'M01: Authentication and Individual Profile'
      responses:
        '200':
          description: 'OK. Display user profile details.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string
                  joinedDate:
                    type: string
                    format: date
                  auctionsParticipated:
                    type: array
                    items:
                      type: string
                example:
                  username: 'john_doe'
                  email: 'john.doe@example.com'
                  joinedDate: '2022-05-01'
                  auctionsParticipated:
                    - 'Antique Vase'
                    - 'Vintage Clock'

    patch:
      operationId: R106
      summary: 'R106: Update User Profile'
      description: 'Allow user to update their profile information. Access: USR'
      tags:
        - 'M01: Authentication and Individual Profile'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - username
                - email
      responses:
        '200':
          description: 'Profile updated successfully.'
        '400':
          description: 'Invalid input or update failed.'

    delete:
      operationId: R108
      summary: 'R108: Delete User Profile'
      description: 'Allow user to delete their profile. Access: USR'
      tags:
        - 'M01: Authentication and Individual Profile'
      responses:
        '200':
          description: 'Profile deleted successfully.'
        '400':
          description: 'Deletion failed.'

  /auctions:
    get:
      operationId: R201
      summary: 'R201: List Auctions'
      description: 'List active auctions. Access: PUB'
      tags:
        - 'M02: Auctions'
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: 'Search term'
        - in: query
          name: category
          schema:
            type: string
          description: 'Category filter'
        - in: query
          name: price_min
          schema:
            type: number
          description: 'Minimum price filter'
        - in: query
          name: price_max
          schema:
            type: number
          description: 'Maximum price filter'
      responses:
        '200':
          description: 'OK. List of auctions.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auction'

    post:
      operationId: R203
      summary: 'R203: Create Auction'
      description: 'Create a new auction. Access: USR'
      tags:
        - 'M02: Auctions'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuctionInput'
      responses:
        '201':
          description: 'Auction created successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'
        '400':
          description: 'Invalid input or creation failed.'

  /auctions/{id}:
    get:
      operationId: R202
      summary: 'R202: View Auction Details'
      description: 'Get details of a specific auction. Access: PUB'
      tags:
        - 'M02: Auctions'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: 'Auction ID'
      responses:
        '200':
          description: 'OK. Auction details.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'

    patch:
      operationId: R204
      summary: 'R204: Update Auction'
      description: 'Update an auction. Access: OWN'
      tags:
        - 'M02: Auctions'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: 'Auction ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuctionInput'
      responses:
        '200':
          description: 'Auction updated successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'
        '400':
          description: 'Invalid input or update failed.'
        '403':
          description: 'Forbidden. User does not own the auction.'

    delete:
      operationId: R205
      summary: 'R205: Delete Auction'
      description: 'Delete an auction. Access: OWN'
      tags:
        - 'M02: Auctions'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: 'Auction ID'
      responses:
        '200':
          description: 'Auction deleted successfully.'
        '403':
          description: 'Forbidden. User does not own the auction.'
        '404':
          description: 'Auction not found.'

  /auctions/{id}/bidding-history:
    get:
      operationId: R206
      summary: 'R206: View Auction Bidding History'
      description: 'Get the bidding history for a specific auction. Access: USR'
      tags:
        - 'M03: Bidding on Auctions'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: 'Auction ID'
      responses:
        '200':
          description: 'OK. Bidding history.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bid'

  /auctions/{id}/bids:
    post:
      operationId: R301
      summary: 'R301: Place Bid on Auction'
      description: 'Place a bid on an auction. Access: USR'
      tags:
        - 'M03: Bidding on Auctions'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: 'Auction ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bidAmount:
                  type: number
              required:
                - bidAmount
      responses:
        '200':
          description: 'Bid placed successfully.'
        '400':
          description: 'Invalid bid amount or bid failed.'
        '404':
          description: 'Auction not found.'

  /categories/{categoryId}:
    get:
      operationId: R207
      summary: 'R207: View Auctions by Category'
      description: 'List auctions in a specific category. Access: PUB'
      tags:
        - 'M02: Auctions'
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
          description: 'Category ID'
      responses:
        '200':
          description: 'OK. List of auctions in the category.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auction'

  /search:
    get:
      operationId: R208
      summary: 'R208: Search Auctions'
      description: 'Search auctions based on query parameters. Access: PUB'
      tags:
        - 'M02: Auctions'
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: 'Search query'
        - in: query
          name: category
          schema:
            type: string
          description: 'Category filter'
        - in: query
          name: price_min
          schema:
            type: number
          description: 'Minimum price filter'
        - in: query
          name: price_max
          schema:
            type: number
          description: 'Maximum price filter'
      responses:
        '200':
          description: 'OK. Search results.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auction'

  /admin/user:
    get:
      operationId: R401
      summary: 'R401: List Users'
      description: 'List all user accounts. Access: ADM'
      tags:
        - 'M04: User Administration and Static Pages'
      responses:
        '200':
          description: 'OK. List of users.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /admin/user/{userId}:
    get:
      operationId: R402
      summary: 'R402: View User'
      description: 'Get details of a specific user account. Access: ADM'
      tags:
        - 'M04: User Administration and Static Pages'
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: 'User ID'
      responses:
        '200':
          description: 'OK. User details.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    patch:
      operationId: R403
      summary: 'R403: Update User'
      description: 'Update a user account. Access: ADM'
      tags:
        - 'M04: User Administration and Static Pages'
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: 'User ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: 'User updated successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      operationId: R404
      summary: 'R404: Delete User'
      description: 'Delete a user account. Access: ADM'
      tags:
        - 'M04: User Administration and Static Pages'
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: 'User ID'
      responses:
        '200':
          description: 'User deleted successfully.'

  /admin/user/{userId}/edit:
    get:
      operationId: R405
      summary: 'R405: Edit User Form'
      description: 'Display form to edit a user account. Access: ADM'
      tags:
        - 'M04: User Administration and Static Pages'
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: 'User ID'
      responses:
        '200':
          description: 'OK. Display edit user form.'

  /about:
    get:
      operationId: R501
      summary: 'R501: About Page'
      description: 'Display the About page. Access: PUB'
      tags:
        - 'M04: User Administration and Static Pages'
      responses:
        '200':
          description: 'OK. Display About page.'

  /contact:
    get:
      operationId: R502
      summary: 'R502: Contact Page'
      description: 'Display the Contact page. Access: PUB'
      tags:
        - 'M04: User Administration and Static Pages'
      responses:
        '200':
          description: 'OK. Display Contact page.'

  /lang/{locale}:
    get:
      operationId: R701
      summary: 'R701: Switch Language'
      description: 'Switch the application language. Access: PUB'
      tags:
        - 'M04: User Administration and Static Pages'
      parameters:
        - in: path
          name: locale
          schema:
            type: string
          required: true
          description: 'Locale code (e.g., en, pt)'
      responses:
        '302':
          description: 'Redirect to previous page with language changed.'

components:
  schemas:
    Auction:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        startingBid:
          type: number
        currentBid:
          type: number
        endTime:
          type: string
          format: date-time
        images:
          type: array
          items:
            type: string
        category:
          type: string
        ownerId:
          type: integer
      required:
        - id
        - title
        - startingBid
        - endTime
        - ownerId

    AuctionInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        startingBid:
          type: number
        images:
          type: array
          items:
            type: string
        category:
          type: string
        endTime:
          type: string
          format: date-time
      required:
        - title
        - description
        - startingBid
        - category
        - endTime

    Bid:
      type: object
      properties:
        id:
          type: integer
        auctionId:
          type: integer
        userId:
          type: integer
        bidAmount:
          type: number
        bidTime:
          type: string
          format: date-time
      required:
        - id
        - auctionId
        - userId
        - bidAmount
        - bidTime
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        joinedDate:
          type: string
          format: date
      required:
        - id
        - username
        - email
        - joinedDate

    UserInput:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - username
        - email
